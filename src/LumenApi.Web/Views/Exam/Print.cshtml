@using LumenApi.Web
@using LumenApi.Web.ViewModels
@inject Lumen090923Context _context

@model PrintReportCardData
@{
    Layout = null;
}
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>

    <link href="https://fonts.googleapis.com/css2?family=Lora:wght@400;500;600;700&family=Neuton:wght@300;400;700&display=swap"
          rel="stylesheet" />
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/Content/style.css" />
    <style>

        #printT {
           /*  border: 1px solid #ccc; */
            padding: 20px;
            margin: 20px;
            width: 10.7in; /* Adjusted width to fit within A4 width */
            height: 15.5in; /* Adjusted height to fit within A4 height */
            /* box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2); */
            /*page-break-after: always;*/ /* Force a new page after each card */
        }
        /* Styles for the loader overlay */
        #loader-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black */
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000; /* Make sure the overlay is on top */
        }

       /*  .loader {
            border: 4px solid #f3f3f3; 
            border-top: 4px solid #3498db;   
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 2s linear infinite;
        } */

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        @@media print {
            #printT {
                page-break-after: auto; /* or avoid specifying page-break-after */
            }
        }
    </style>

</head>
<body>
    <div id="loader-overlay">
        <div class="loader"></div>
    </div>
@*     <button id="printButton">Print</button>
    <button id="ModifyData" onclick="DeleteExtraGradeRow();">Modify Data</button> *@
    @*&nbsp;&nbsp;<button id="downloadButton">Download</button>*@

    <div class="d-flex justify-content-center align-items-center h-100" id="JsonPrint">


        <div class="d-flex flex-column" id="printColumns">
            <div class="mt-3" id="printT">
                    <table style="width:100%; border: none; margin-top:20px;">
                        <tr style="border: none">
                        <td style="border: none;align-content:center;width:19%">
                            <img src="@Model.StudentData.SchoolLogo"
                                 alt="" style="width: 180px; height: 150px; margin-left: 13px;" />
                        </td>
                        <td style="border: none;width:63%;" class="headerContent text-center" >
                            <p class="ft11 mb-0" style="text-align:center">
                                <b>@Model.StudentData.SchoolName</b>
                           </p> 
                        <br />
                            <br />
                            @* <p class="ft13 mb-0" style="font-size: 1.5rem">
                            @Model.StudentData.newAddress
                            </p> *@
                            <br />
                            <p class="ft13">
                                <b>Academic Session : @Model.StudentData.CurrentYear</b>
                            </p>
                            <br />
                            <p class="ft13">
                           <b>Report Card</b>
                            </p>
                        </td>
                        <td style="border: none;align-content:center;width:18%">
                            <img src="/Content/SchoolImages/logo3.png"
                                 alt="notfound" style="width: 180px; height:150px;" />
                            </td>
                        </tr>
                    </table>
                <br />
                <hr class="m-0" />

                <!-- Students Details -->
                <table>
                    <tr>
                        <td>
                            <span style="margin-right: 5px;"><b>Student's Name</b></span> <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="StudentName">@Model.StudentData.StudentName</span>
                            </span>
                        </td>
                        <td>
                            <span><b>Class & Section</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="ClassSection"></span>@Model.StudentData.ClassName - @Model.StudentData.SectionName
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span style="margin-right: 11px;"><b>Father's Name</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="FatherName"></span>@Model.StudentData.FatherName
                            </span>
                        </td>
                        <td>
                            <span style="margin-right: 16px;"><b>Date of Birth</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="DateOfBirth"></span>@Model.StudentData.DateOfBirth
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span style="margin-right: 6px;"><b>Mother's Name</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="MotherName">@Model.StudentData.MotherName</span>
                            </span>
                        </td>
                        <td>
                            <span style="margin-right: 27px;"><b>Attendance</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="Attendance">@Model.StudentData.Attendance</span>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span style="margin-right: 44px;"><b>Roll No.</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="RollNo">@Model.StudentData.RollNo</span>
                            </span>
                        </td>
                        <td>
                            <span style="margin-right: 26px;"><b>Scholar No.</b></span>
                            <span style="text-transform: uppercase;">
                                :
                                <span style="border-bottom: 1px dashed;" id="ScholarNo">@Model.StudentData.ScholarNo</span>
                            </span>
                        </td>
                    </tr>
                </table>
               


                <!-- marks section  -->
                <table class="text-center my-2 ft15" id="MarksTable">
                    <tr>
                        <th style="width: 180px;">Scholastic Areas:</th>

                        @if (Model.GroupedTerms.Where(x => x.Term.Contains("UT")).Any())
                        {
                            var colspan = @Model.GroupedTerms.Where(x => x.Term.Contains("UT")).Count() + 2;
                            <th colspan="3" scope="colgroup">Unit Test</th>
                        }

                        @foreach (var col in Model.GroupedTerms.Where(x => !x.Term.Contains("UT")).DistinctBy(x => x.Term))
                        {
                            <th colspan="4" scope="colgroup">@col.Term</th>
                        }
                        @if (Model.StudentData.TermID == 10)
                        {
                            <th colspan="2" scope="colgroup">Total</th>
                        }
                    </tr>
                    <tr>
                        <th scope="col">Subjects</th>
                        @if (Model.GroupedTerms.Where(x => x.Term.Contains("UT")).Any())
                        {
                            decimal _total = 0;
                            @foreach (var col in Model.GroupedTerms.Where(x => x.Term.Contains("UT")).DistinctBy(x => x.Term))
                            {
                                _total += (decimal)col.MaximumMarks;
                                <th scope="colgroup">@col.Term (@col.MaximumMarks)</th>
                            }
                            <th scope="col">Marks Obt. (@_total)<span id=""></span></th>
                        }
                        @foreach (var col in Model.GroupedTerms.Where(x => !x.Term.Contains("UT")).DistinctBy(x => x.Term))
                        {

                            var theoryTotalMarks = @Model.GroupedTerms.Where(x => x.Term == col.Term && x.TestType == "Theory").Select(x => x.MaximumMarks).FirstOrDefault();
                            var practicalTotalMarks = @Model.GroupedTerms.Where(x => x.Term == col.Term && x.TestType == "Practical").Select(x => x.MaximumMarks).FirstOrDefault();
                            var total = theoryTotalMarks + practicalTotalMarks;
                            <th scope="col">Theory (@theoryTotalMarks)<span class=""></span></th>
                            <th scope="col">Practical  (@practicalTotalMarks) <span id=""></span></th>
                            <th scope="col">Marks Obt. (@total)<span id=""></span></th>
                            <th scope="col">Grade</th>

                        }

                        @if (Model.StudentData.TermID == 10)
                        {
                            <th scope="col">Marks</th>
                            <th scope="col">Grade</th>
                        }

                    </tr>
                    @if (Model.GroupedSubjects!=null){
                    @foreach (var row in Model.GroupedSubjects)
                    {

                        @if (!row.IsOptional)
                        {
                            var isUnitTest = false;


                            decimal total = 0;
                            decimal subjectsmaxmarks = 0;
                            <tr>
                                <td>@row.SubjectName</td>

                                @foreach (var col in row.Terms.Where(x => x.Name.Contains("UT")).ToList())
                                {



                                    <td>@col.TheoryMark</td>
                                    <td>@col.Grade</td>
                                }
                                @if (isUnitTest)
                                {

                                }

                                @foreach (var col in row.Terms.Where(x => !x.Name.Contains("UT")).ToList())
                                {
                                    total += (decimal)@col.TotallMark;
                                    subjectsmaxmarks += (decimal)@col.MaximumMarks;
                                    decimal totalPercentage = (total / subjectsmaxmarks) * 100;

                                    var grade = _context.GradingCriterias
                                    .Where(g => totalPercentage >= g.MinimumPercentage && totalPercentage <= g.MaximumPercentage && Model.StudentData.ClassID == g.ClassID && Model.StudentData.TermID == g.TermID)
                                    .Select(g => g.Grade)
                                    .FirstOrDefault();

                                    <td>@col.TheoryMark</td>
                                    <td>@col.PracticalMark</td>
                                    <td>@col.TotallMark</td>
                                    <td>@grade</td>
                                }
                                @if (Model.StudentData.TermID == 10)
                                {
                                    //decimal totalPercentage = (total / 20) * 100;
                                    decimal totalPercentage = (total / subjectsmaxmarks) * 100;

                                    var grade = _context.GradingCriterias
                                    .Where(g => totalPercentage >= g.MinimumPercentage && totalPercentage <= g.MaximumPercentage && Model.StudentData.ClassID == g.ClassID && Model.StudentData.TermID == g.TermID)
                                    .Select(g => g.Grade)
                                    .FirstOrDefault();

                                    <td>@total</td>
                                    <td>@grade</td>
                                }
                            </tr>
                        }

                    }
                    }

                    <tr>
                        <td>Total</td>
                        @{
                            decimal unitTestTotal = 0;
                            decimal tot_total = 0;
                        }
                        @foreach (var col in Model.Term.Where(x => x.Contains("UT")).ToList())
                        {

                            var totalMarkUT = Model.GroupedTerms.Where(a => a.Term == col).Select(x => x.Total).FirstOrDefault();
                            var grade = Model.GroupedTerms.Where(a => a.Term == col).Select(x => x.Grade).FirstOrDefault();
                            unitTestTotal += (decimal)totalMarkUT;
                            <td>@totalMarkUT</td>
                            <td>@grade</td>


                            tot_total += (decimal)totalMarkUT;
                        }
                       @*  <td>@unitTestTotal</td> *@
                        @foreach (var col in Model.Term.Where(x => !x.Contains("UT")).ToList())
                        {
                            var totalMarkTheory = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Theory").Select(x => x.Total).FirstOrDefault();
                            var totalMarkPractical = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Practical").Select(x => x.Total).FirstOrDefault();
                            var totalMaxTheory = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Theory").Select(x => x.MaximumMarks).FirstOrDefault();
                            var totalMaxPractical = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Practical").Select(x => x.MaximumMarks).FirstOrDefault();

                            var sum = totalMarkTheory + totalMarkPractical;
                            //var Percentace = sum
                            var grade = _context.GradingCriterias
                            .Where(g => sum >= g.MinimumPercentage && sum <= g.MaximumPercentage && Model.StudentData.ClassID == g.ClassID &&Model.StudentData.TermID==g.TermID)
                            .Select(g => g.Grade)
                            .FirstOrDefault();

                            <td>@totalMarkTheory</td>
                            <td>@totalMarkPractical</td>
                            <td>@sum</td>
                            <td>@grade</td>

                            tot_total += (decimal)sum;
                        }
                        @if (Model.StudentData.TermID == 10)
                        {
                            var grade = _context.GradingCriterias
                            .Where(g => tot_total >= g.MinimumPercentage && tot_total <= g.MaximumPercentage && Model.StudentData.ClassID == g.ClassID)
                            .Select(g => g.Grade)
                            .FirstOrDefault();

                            <td>@tot_total</td>
                            <td>@grade</td>
                        }
                    </tr>
                    <tr>
                        <td>Percentage</td>
                        @{
                            decimal _unitTesTotaltPerc = 0;
                            decimal _tot_Total_Perc = 0;
                        }
                        @foreach (var col in Model.Term.Where(x => x.Contains("UT")).ToList())
                        {

                            var ut_perc = Model.GroupedTerms.Where(a => a.Term == col).Select(x => x.Percentage).FirstOrDefault();
                            var grade = Model.GroupedTerms.Where(a => a.Term == col).Select(x => x.Grade).FirstOrDefault();
                            <td>@ut_perc.ToString("F2")%</td>
                            <td>@grade</td>
                            _unitTesTotaltPerc += ut_perc;
                            _tot_Total_Perc += ut_perc;
                        }
                        @{
                            decimal _unitTestPerc = _unitTesTotaltPerc / 2;
                        }
                       @*  <td>@_unitTestPerc.ToString("F2")%</td> *@
                        @foreach (var col in Model.Term.Where(x => !x.Contains("UT")).ToList())
                        {
                            var ter_perc = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Theory").Select(x => x.Percentage).FirstOrDefault();

                            var ter_perc_prac = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Practical").Select(x => x.Percentage).FirstOrDefault();

                            var totalMarkTheory = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Theory").Select(x => x.Total).FirstOrDefault();
                            var totalMarkPractical = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Practical").Select(x => x.Total).FirstOrDefault();

                            var totalMaxMarkTheory = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Theory").Select(x => x.MaximumMarks).FirstOrDefault();
                            var totalMaxMarkPractical = Model.GroupedTerms.Where(a => a.Term == col && a.TestType == "Practical").Select(x => x.MaximumMarks).FirstOrDefault();

                            var sum = Model.ObtainedPercent;

                            //var sum = (ter_perc + ter_perc_prac) / 2;

                            var grade = _context.GradingCriterias
                            .Where(g => sum >= g.MinimumPercentage && sum <= g.MaximumPercentage && Model.StudentData.ClassID == g.ClassID &&Model.StudentData.TermID==g.TermID)
                            .Select(g => g.Grade)
                            .FirstOrDefault();

                            <td>@ter_perc.ToString("F2")%</td>
                            <td>@ter_perc_prac.ToString("F2")%</td>
                            <td>@sum.ToString("F2")%</td>
                            <td>@grade</td>

                            tot_total += (int)sum;
                            _tot_Total_Perc += ter_perc_prac;
                        }

                        @if (Model.StudentData.TermID == 10)
                        {
                            <td>@_unitTestPerc.ToString("F2")%</td>
                            <td></td>
                        }
                    </tr>
                    @if (Model.GroupedSubjects!=null)
                    {
                    @foreach (var row in Model.GroupedSubjects)
                    {
                        @if (row.IsOptional)
                        {
                            <tr>
                                <td>@row.SubjectName</td>
                                @if (row.Terms.Where(x => x.Name.Contains("UT")).Any())
                                {
                                    @foreach (var col in row.Terms.Where(x => x.Name.Contains("UT")).ToList())
                                    {

                                        <td>@col.TheoryMark</td>
                                    }
                                }
                                else
                                {
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                }

                                @if (row.Terms.Where(x => !x.Name.Contains("UT")).Any())
                                {
                                    @foreach (var col in row.Terms.Where(x => !x.Name.Contains("UT")).ToList())
                                    {

                                        <td>@col.TheoryMark</td>
                                        <td>@col.PracticalMark</td>
                                        <td>@col.TotallMark</td>
                                        <td>@col.Grade</td>
                                    }
                                }
                                else
                                {
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                    <td>-</td>
                                }
                                @if (Model.StudentData.TermID == 10)
                                {
                                    <td></td>
                                    <td></td>
                                }
                            </tr>
                        }

                    }
                    }
                </table>
                <br />
                <table>
                    <tbody>
                        <tr>
                            <td>
                                <table style="border-collapse: collapse; text-align: left; border: 1px solid #ddd;">
                                    <thead>
                                        <tr>
                                            <th style="width: 300px; padding: 8px; border: 1px solid #ddd;">Co-Scholastic Areas</th>
                                            <th style="width: 65px; padding: 8px; border: 1px solid #ddd;">Term</th>
                                            <th style="width: 65px; padding: 8px; border: 1px solid #ddd;">Grade</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var res in Model.CoscholasticAreaData.Take(Model.CoscholasticAreaData.Count / 2))
                                        {
                                            <tr>
                                                <td style="padding: 8px; border: 1px solid #ddd;">@res.Name</td>
                                                <td style="padding: 8px; border: 1px solid #ddd;">@res.Term</td>
                                                <td style="padding: 8px; border: 1px solid #ddd;">@res.ObtainedGrade</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                            <td>
                                <table style=" border-collapse: collapse; text-align: left; border: 1px solid #ddd;">
                                    <thead>
                                        <tr>
                                            <th style="width: 300px; padding: 8px; border: 1px solid #ddd;">Co-Scholastic Areas</th>
                                            <th style="width: 65px; padding: 8px; border: 1px solid #ddd;">Term</th>
                                            <th style="width: 65px; padding: 8px; border: 1px solid #ddd;">Grade</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var res in Model.CoscholasticAreaData.Skip(Model.CoscholasticAreaData.Count / 2))
                                        {
                                            <tr>
                                                <td style="padding: 8px; border: 1px solid #ddd;">@res.Name</td>
                                                <td style="padding: 8px; border: 1px solid #ddd;">@res.Term</td>
                                                <td style="padding: 8px; border: 1px solid #ddd;">@res.ObtainedGrade</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div style="display: inline-flex; justify-content: space-between; gap: 20px;">
                    <!-- Left Section -->
                    <div style="width: 40%;">
                    </div>

                    <!-- Right Section -->
                    <div style="width: 40%;">
                    </div>
                </div>
                <br />
                <table>
                    <tr>
                        <td>
                            <span><b>Result :</b></span>
                            <span id="result"> @Model.Result</span>
                        </td>
                        <td>
                            <span><b>Overall Grade :</b></span>
                            <span id="overallGrade"></span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span><b>Class Teacher's Remarks : </b></span>
                            <span><span id="teacherRemarkText"></span>  <span id="promotedClass">@Model.StudentData.PromotedClass</span> </span>
                        </td>
                        <td>
                            <span><b>Class Teacher's Remarks : </b></span>
                            <span id="UnitTestRemarkText">@Model.StudentData.Remark</span>
                        </td>
                    </tr>
                </table>
                <br />
                <table>
                    <tr>
                        <td>
                            <div class="signature">
                                @* <img src="" alt="" /> *@
                                <span class="ft15"><b>Parent / Guardian</b></span>
                            </div>
                        </td>
                        <td>
                            <div class="signature">
                                @* <img src="@Model.StudentData.StaffSignatureLink" id="teachersignature" style="width:115px; height:60px;" alt="" /> *@
                                <span class="ft15"><b>Class Teacher</b></span>
                            </div>
                        </td>
                        <td>
                            <div class="signature">
                                @* <img src="~/Content/Images/principle.png" style="width:115px; height:60px;" alt="" /> *@
                                <span class="ft15"><b>Principal</b></span>
                            </div>
                        </td>
                    </tr>
                </table>

                <!-- Result section  -->
                @* <div class="d-flex justify-content-between align-items-center px-1">
                <div class="ft15">
                <span><b>Result :</b></span>
                <span id="result"> @Model.Result</span>
                </div>
                <div class="ft15">
                <span><b>Overall Grade :</b></span>
                <span id="overallGrade"></span>
                </div>
                </div> *@
                @*  <br /><br />
                <div class="ft15 px-1" id="teacherRemark">
                <span><b>Class Teacher's Remarks : </b></span>
                <span><span id="teacherRemarkText"></span>  <span id="promotedClass">@Model.StudentData.PromotedClass</span> </span>
                </div>
                <div class="ft15 px-1" id="UnitTestRemark">
                <span><b>Class Teacher's Remarks : </b></span>
                <span id="UnitTestRemarkText">@Model.StudentData.Remark</span>
                </div>
                <br /><br /> *@
                <!-- signature section  -->
                <div class="d-flex justify-content-between align-items-baseline px-3">
                </div>
                <br />

                <div class="ft15 px-1 mt-2">
                    <span><b>Grading scale for Scholastic Areas : </b></span>
                    <span>Grades are awarded on a 6-point grading scale as follows -</span>
                </div>

                <!-- marks range section  -->

                <table style="width: 100%; border-collapse: collapse; text-align: left; border: 1px solid #ddd;font-size:12px;">
                    <thead>
                    </thead>
                    <tbody>
                        @if (Model.GradingCriteria.Any())
                        {
                            <tr>
                                @foreach (var item in Model.GradingCriteria.DistinctBy(x => x.Grade))
                                {
                                    <td style="padding: 8px; border: 1px solid #ddd;">@item.MinimumPercentage - @item.MaximumPercentage</td>

                                }
                            </tr>
                            <tr>
                                @foreach (var item in Model.GradingCriteria.DistinctBy(x => x.Grade))
                                {
                                    <td style="padding: 8px; border: 1px solid #ddd;">@item.Grade</td>

                                }
                            </tr>
                            <tr>
                                @foreach (var item in Model.GradingCriteria.DistinctBy(x => x.Grade))
                                {
                                    <td style="padding: 8px; border: 1px solid #ddd;">@item.GradeDescription</td>

                                }
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" style="padding: 8px; text-align: center; border: 1px solid #ddd;">
                                    No grading criteria found.
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <table class="text-center ft15" id="GradingCriteria">
                    <tbody class="grate-tbody">

                        @{

                        }
                    </tbody>

                </table>

                <!-- End  -->
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.0.slim.js" integrity="sha256-7GO+jepT9gJe9LB4XFf8snVOjX3iYNb0FHYr5LI1N5c=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
   @*  <script src="~/Scripts/DevelopmentJS/PrintReport.js"></script> *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        // Function to handle the printing
        function printDiv() {
            const printContent = document.getElementById("JsonPrint");
            const originalContent = document.body.innerHTML;

            document.body.innerHTML = printContent.outerHTML;
            window.print();

            document.body.innerHTML = originalContent;
        }

        // Attach click event to the 'Print' button
        const printButton = document.getElementById("printButton");
        printButton.addEventListener("click", printDiv);

    </script>
</body>

<!-- Add the 'Print' button -->



</html>
